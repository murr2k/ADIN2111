# ADIN2111 Driver Build Validation
# Phase 1 of CI/CD Pipeline Implementation
# Author: Murray Kopit
# Date: August 11, 2025

name: Build Validation

on:
  push:
    branches: [ main, develop, 'feature/**' ]
    paths:
      - 'drivers/**'
      - 'tests/**'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'drivers/**'
      - 'tests/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:  # Allow manual trigger

env:
  DRIVER_PATH: drivers/net/ethernet/adi/adin2111

jobs:
  build:
    name: Build Kernel Module
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kernel: [
          '6.1',
          '6.5',
          '6.6',
          '6.8',
          'latest'
        ]
        gcc: ['9', '11', '12']
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Setup Build Environment
      run: |
        echo "::group::Update package lists"
        sudo apt-get update
        echo "::endgroup::"
        
        echo "::group::Install GCC ${{ matrix.gcc }}"
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.gcc }} 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ matrix.gcc }} 100
        echo "::endgroup::"
        
        echo "::group::Install build dependencies"
        sudo apt-get install -y \
          build-essential \
          bc \
          bison \
          flex \
          libelf-dev \
          libssl-dev \
          make \
          perl \
          python3
        echo "::endgroup::"
        
        echo "::group::Verify GCC version"
        gcc --version
        echo "::endgroup::"
    
    - name: Setup Kernel Headers
      run: |
        echo "::group::Update package lists"
        sudo apt-get update
        echo "::endgroup::"
        
        echo "::group::Determine kernel version"
        if [ "${{ matrix.kernel }}" = "latest" ]; then
          # Use the runner's current kernel
          KERNEL_VERSION=$(uname -r)
          echo "Using current kernel: $KERNEL_VERSION"
        else
          # First, let's see what's available
          echo "Available kernels for ${{ matrix.kernel }}:"
          apt-cache search linux-headers-${{ matrix.kernel }} | grep -E "generic|amd64" || true
          
          # Try to find the kernel version
          KERNEL_VERSION=""
          
          # Special handling for different kernel versions
          case "${{ matrix.kernel }}" in
            "6.1")
              # Ubuntu 22.04 doesn't have 6.1, use generic
              echo "::warning::Kernel 6.1 not available, using generic headers"
              KERNEL_VERSION="generic"
              ;;
            "6.5")
              # Ubuntu 24.04 kernel, may need to add PPA
              KERNEL_VERSION=$(apt-cache search linux-headers-6.5.0 | \
                              grep -E "linux-headers-6\.5\.0-[0-9]+-generic" | \
                              sort -V | tail -1 | awk '{print $1}' | \
                              sed 's/linux-headers-//') || true
              if [ -z "$KERNEL_VERSION" ]; then
                echo "::warning::Kernel 6.5 not found, using generic"
                KERNEL_VERSION="generic"
              fi
              ;;
            "6.6")
              # Not in standard repos
              echo "::warning::Kernel 6.6 not in standard repos, using generic"
              KERNEL_VERSION="generic"
              ;;
            "6.8")
              # Ubuntu 24.04 kernel
              KERNEL_VERSION=$(apt-cache search linux-headers-6.8.0 | \
                              grep -E "linux-headers-6\.8\.0-[0-9]+-generic" | \
                              sort -V | tail -1 | awk '{print $1}' | \
                              sed 's/linux-headers-//') || true
              if [ -z "$KERNEL_VERSION" ]; then
                echo "::warning::Kernel 6.8 not found, using generic"
                KERNEL_VERSION="generic"
              fi
              ;;
            *)
              KERNEL_VERSION="generic"
              ;;
          esac
          
          echo "Selected kernel version: $KERNEL_VERSION"
        fi
        echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
        echo "::endgroup::"
        
        echo "::group::Install kernel headers"
        if [ "$KERNEL_VERSION" = "generic" ]; then
          sudo apt-get install -y linux-headers-generic build-essential
        else
          sudo apt-get install -y linux-headers-${KERNEL_VERSION} build-essential || \
            sudo apt-get install -y linux-headers-generic build-essential
        fi
        echo "::endgroup::"
        
        echo "::group::Verify kernel headers"
        echo "Installed kernel headers:"
        ls -la /lib/modules/*/build/ 2>/dev/null | head -5 || echo "No kernel build directories found"
        echo "Using kernel:"
        ls -la /lib/modules/$(uname -r)/build/ 2>/dev/null || echo "Current kernel build directory not found"
        echo "::endgroup::"
    
    - name: Build Kernel Module
      id: build_module
      run: |
        echo "::group::Build ADIN2111 driver"
        cd ${{ env.DRIVER_PATH }}
        
        # Find kernel build directory
        if [ -d "/lib/modules/${{ env.KERNEL_VERSION }}/build" ]; then
          KDIR="/lib/modules/${{ env.KERNEL_VERSION }}/build"
        else
          KDIR="/lib/modules/$(uname -r)/build"
        fi
        echo "Using kernel directory: $KDIR"
        
        # Build with warnings as errors for strict checking
        make -C $KDIR M=$PWD clean
        make -C $KDIR M=$PWD W=1 2>&1 | tee build.log
        RESULT=${PIPESTATUS[0]}
        
        echo "::endgroup::"
        
        # Check build result
        if [ $RESULT -ne 0 ]; then
          echo "::error::Build failed with exit code $RESULT"
          exit $RESULT
        fi
        
        # Check for module file
        if [ ! -f "adin2111_driver.ko" ]; then
          echo "::error::Kernel module adin2111_driver.ko not found after build"
          exit 1
        fi
        
        echo "✅ Build successful"
        echo "build_status=success" >> $GITHUB_OUTPUT
    
    - name: Check for Compiler Warnings
      if: success()
      run: |
        cd ${{ env.DRIVER_PATH }}
        echo "::group::Analyzing build warnings"
        
        # Extract warnings from build log
        grep -E "(warning:|Warning:)" build.log > warnings.log || true
        
        # Count warnings
        WARNING_COUNT=$(wc -l < warnings.log)
        echo "Found $WARNING_COUNT compiler warnings"
        
        # Display warnings if any
        if [ $WARNING_COUNT -gt 0 ]; then
          echo "::warning::Build completed with $WARNING_COUNT warnings"
          echo "Warnings found:"
          cat warnings.log
          
          # Set output for badge
          echo "warnings=$WARNING_COUNT" >> $GITHUB_OUTPUT
          
          # Fail if too many warnings (threshold: 5)
          if [ $WARNING_COUNT -gt 5 ]; then
            echo "::error::Too many warnings ($WARNING_COUNT > 5)"
            exit 1
          fi
        else
          echo "✅ No compiler warnings"
          echo "warnings=0" >> $GITHUB_OUTPUT
        fi
        echo "::endgroup::"
    
    - name: Verify Module Information
      if: success()
      run: |
        cd ${{ env.DRIVER_PATH }}
        echo "::group::Module information"
        
        # Display module info
        modinfo ./adin2111_driver.ko
        
        # Check module size
        SIZE=$(stat -c%s adin2111_driver.ko)
        echo "Module size: $SIZE bytes"
        
        # Verify module symbols
        nm -n adin2111_driver.ko | head -20
        
        echo "::endgroup::"
    
    - name: Build Test Modules
      if: success()
      run: |
        echo "::group::Build test suite"
        cd tests
        
        # Find kernel build directory
        if [ -d "/lib/modules/${{ env.KERNEL_VERSION }}/build" ]; then
          KDIR="/lib/modules/${{ env.KERNEL_VERSION }}/build"
        else
          KDIR="/lib/modules/$(uname -r)/build"
        fi
        
        # Build test kernel module
        if [ -f "kernel/Makefile" ]; then
          cd kernel
          make -C $KDIR M=$PWD clean
          make -C $KDIR M=$PWD
          if [ ! -f "adin2111_test.ko" ]; then
            echo "::error::Test module build failed"
            exit 1
          fi
          echo "✅ Test module built successfully"
        fi
        
        echo "::endgroup::"
    
    - name: Upload Build Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.kernel }}-gcc${{ matrix.gcc }}
        path: |
          ${{ env.DRIVER_PATH }}/*.ko
          ${{ env.DRIVER_PATH }}/*.o
          ${{ env.DRIVER_PATH }}/*.mod
          ${{ env.DRIVER_PATH }}/*.mod.c
          ${{ env.DRIVER_PATH }}/build.log
          ${{ env.DRIVER_PATH }}/warnings.log
          tests/kernel/*.ko
        retention-days: 7
    
    - name: Generate Build Report
      if: always()
      run: |
        echo "## Build Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Kernel Version**: ${{ matrix.kernel }}" >> $GITHUB_STEP_SUMMARY
        echo "- **GCC Version**: ${{ matrix.gcc }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Status**: ${{ steps.build_module.outputs.build_status || 'failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Warnings**: ${{ steps.build_module.outputs.warnings || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "${{ env.DRIVER_PATH }}/adin2111_driver.ko" ]; then
          echo "### Module Details" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          modinfo ${{ env.DRIVER_PATH }}/adin2111_driver.ko | head -10 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

  # Summary job to ensure all builds pass
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
    - name: Check Build Results
      run: |
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ All build configurations passed successfully!"
          echo "## ✅ Build Validation Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All kernel and compiler combinations built successfully." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some build configurations failed"
          echo "## ❌ Build Validation Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "One or more build configurations failed. Check the matrix results above." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi